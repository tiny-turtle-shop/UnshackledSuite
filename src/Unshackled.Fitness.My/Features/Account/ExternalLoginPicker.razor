@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Unshackled.Fitness.Core.Data.Entities
@using Unshackled.Fitness.My.Extensions

@inject SignInManager<UserEntity> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length > 0)
{
	<MudText Typo="Typo.h6" Class="mt-6 mb-3" Align="Align.Center">@Title</MudText>
	<div class="d-flex justify-content-center flex-row flex-wrap gap-2">
		@foreach (var provider in externalLogins)
		{
			<form action="account/perform-external-login" method="post">
				<AntiforgeryToken />
				<input type="hidden" name="Provider" value="@provider.Name">
				<input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Default" StartIcon="@provider.Name.GetBrandIcon()">
					@provider.DisplayName
				</MudButton>
			</form>
		}
	</div>

	<MudText Typo="Typo.h6" Align="Align.Center" Class="mt-4">&mdash; OR &mdash;</MudText>
}

@code {
	private AuthenticationScheme[] externalLogins = [];

	[Parameter]
	public string Title { get; set; } = "Log in with";

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	protected override async Task OnInitializedAsync()
	{
		externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
	}
}
