@inherits SectionIngredientsBase

@if(IsEditMode || Ingredients.Any())
{
	<SectionContainer IsEditMode="@IsEditMode" IsEditing="@IsEditing" Class="mb-6">
		<SectionHeader Title="Ingredients" Typo="Typo.h5" IsEditMode="@IsEditMode" IsEditing="@IsEditing" DisableControls="@DisableControls" Class="mb-4" EditingClass="mb-4"
		OnCancelClicked="@(() => HandleCancelEditClicked())" OnSaveClicked="@HandleUpdateClicked">
			<DefaultToolbar>
				<MudToggleIconButton Disabled="@DisableSectionControls" Icon="@Icons.Material.Filled.ShoppingBag" ToggledIcon="@Icons.Material.Filled.ShoppingBag"
				Color="Color.Default" ToggledColor="Color.Secondary" @bind-Toggled="@ShowProducts" />
				<MudIconButton Icon="@Icons.Material.Filled.Analytics" Disabled="@DisableSectionControls" OnClick="@(() => HandleOpenNutritionClicked())" />
				<ScaleMenuComponent Scale="@Scale" ScaleChanged="@HandleScaleChanged" />
			</DefaultToolbar>
			<EditModeToolbar>
				<MudIconButton Icon="@Icons.Material.Filled.Edit" Disabled="@DisableSectionControls" OnClick="@(() => HandleEditClicked())" />
			</EditModeToolbar>
		</SectionHeader>

		@if (!IsEditing)
		{
			<MudToolBar Gutters="false">
				<div>
					<MudCheckBox T="bool?" Dense="true" Color="Color.Secondary" UncheckedColor="Color.Default" Label="All/None" Class="me-4" Size="Size.Small"
									Value="IsSelectAll" ValueChanged="@((bool? value) => HandleSelectAllChange(value))"></MudCheckBox>
				</div>
			</MudToolBar>
			<GroupedList Groups="@Groups" Items="@Ingredients">
				<GroupRenderer>
					<div class="d-flex flex-row gap-2 align-center mt-4 mb-2">
						<div>
							<MudCheckBox T="bool?" Dense="true" Color="Color.Secondary" UncheckedColor="Color.Default" Size="Size.Small"
											Value="context.IsSelectAll" ValueChanged="@((bool? value) => HandleGroupItemChecked(context, value))"></MudCheckBox>
						</div>
						<MudText Typo="Typo.subtitle1" Class="flex-grow-1">@context.Title</MudText>
					</div>
				</GroupRenderer>
				<ItemRenderer>
					<div class="d-flex flex-row gap-2 align-center">
						<div>
							<MudCheckBox T="bool" Dense="true" Color="Color.Secondary" UncheckedColor="Color.Default" Size="Size.Small"
											Value="context.Item.IsSelected" ValueChanged="@((bool value) => HandleItemChecked(context.Item, value))"></MudCheckBox>
						</div>
						<div class="flex-grow-1">
							<MudText>
								@if (ShowProducts && context.Item.HasSubstitution)
								{
									<IngredientText Amount="@(context.Item.Amount * Scale)" AmountLabel="@context.Item.AmountLabel"
													Title="@($"{context.Item.Brand} {context.Item.ProductTitle}".Trim())" PrepNote="@context.Item.PrepNote" 
													Href="@($"/products/{context.Item.ProductSid}")" />
								}
								else
								{
									<IngredientText Amount="@(context.Item.Amount * Scale)" AmountLabel="@context.Item.AmountLabel"
													Title="@context.Item.Title" PrepNote="@context.Item.PrepNote" Href="@($"/ingredients/{context.Item.Key}")" />
								}
							</MudText>
						</div>
					</div>
					
				</ItemRenderer>
				<EmptyListRenderer>
					<MudDivider DividerType="DividerType.FullWidth" Class="my-2" />
					<MudAlert Severity="Severity.Normal" Icon="@Icons.Material.Filled.Info">You have not added any ingredients.</MudAlert>
					<MudDivider DividerType="DividerType.FullWidth" Class="my-2" />
				</EmptyListRenderer>
			</GroupedList>
		}
		else
		{
			<SortableGroupedList TGroup="FormIngredientGroupModel" TItem="FormIngredientModel" Groups="@FormGroups" Items="@FormIngredients"
									ToolbarAlignment="HorizontalAlignment.Left" ToolbarPosition="ToolbarPositions.Top" DisableSort="@IsWorking"
									IsSortingChanged="HandleIsSorting" SortOrderChanged="@HandleSortChanged">
				<GroupRenderer>
					<MudText Typo="Typo.body1" Class="mt-4 mb-2">@context.Title</MudText>
				</GroupRenderer>
				<ItemRenderer>
					<div class="d-flex flex-row gap-4 align-center">
						<MudText Class="flex-grow-1">
							<IngredientText Amount="@(context.Item.Amount * Scale)" AmountLabel="@context.Item.AmountLabel"
											Title="@context.Item.Title" PrepNote="@context.Item.PrepNote" />
						</MudText>
						<div>
							<MudIconButton Icon="@Icons.Material.Filled.ChevronRight" title="Edit" Disabled="@DisableControls" OnClick="@(() => HandleEditItemClicked(context.Item))" />
						</div>
					</div>
				</ItemRenderer>
				<DraggableGroupRenderer>
					<MudPaper Elevation="2" Class="pa-4 my-4">
						<MudGrid Spacing="2" Class="align-center">
							<MudItem xs="1">
								<MudIcon Icon="@Icons.Material.Filled.DragHandle" />
							</MudItem>
							<MudItem xs="11">
								<MudText>
									@(string.IsNullOrEmpty(context.Title) ? "Household: <No title>" : context.Title)
								</MudText>
							</MudItem>
						</MudGrid>
					</MudPaper>
				</DraggableGroupRenderer>
				<DraggableItemRenderer>
					<MudPaper Elevation="2" Class="pa-4 my-4">
						<MudGrid Spacing="2" Class="align-center">
							<MudItem xs="1">
								<MudIcon Icon="@Icons.Material.Filled.DragHandle" />
							</MudItem>
							<MudItem xs="11">
								<MudText>
									<IngredientText Amount="@(context.Amount * Scale)" AmountLabel="@context.AmountLabel"
													Title="@context.Title" PrepNote="@context.PrepNote" />
								</MudText>
							</MudItem>
						</MudGrid>
					</MudPaper>
				</DraggableItemRenderer>
				<EmptyListRenderer>
					<MudDivider DividerType="DividerType.FullWidth" Class="my-2" />
					<MudAlert Severity="Severity.Normal" Icon="@Icons.Material.Filled.Info">You have not added any ingredients.</MudAlert>
					<MudDivider DividerType="DividerType.FullWidth" Class="my-2" />
				</EmptyListRenderer>
				<NewZoneRenderer>
					<MudText Typo="Typo.body1" Class="my-4">Drop here to create a new group.</MudText>
				</NewZoneRenderer>
				<ListTools>
					<MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.AddCircle" Disabled="@DisableControls"
								OnClick="@(() => HandleAddClicked())">Add</MudButton>
					<MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.AddCircleOutline" Disabled="@DisableControls"
								OnClick="@(() => HandleBulkAddClicked())">Bulk Add</MudButton>
				</ListTools>
			</SortableGroupedList>
		}
	</SectionContainer>	

	<SideDrawer Title="@DrawerTitle" Open="@DrawerOpen" OpenChanged="@(() => HandleCancelClicked())">
		@if (DrawerView == Views.AddIngredient)
		{
			<DrawerIngredient Model="@FormModel" DisableFormControls="@DisableControls" IsAdding="true"
							  OnFormSubmitted="@HandleIngredientAddFormSubmitted" OnCanceled="@(() => HandleCancelClicked())" />
		}
		else if (DrawerView == Views.EditIngredient)
		{
			<DrawerIngredient Model="@FormModel" DisableFormControls="@DisableControls" IsAdding="false"
							  OnFormSubmitted="@HandleIngredientEditFormSubmitted" OnDeleted="@HandleDeleteClicked" OnCanceled="@(() => HandleCancelClicked())" />
		}
		else if (DrawerView == Views.BulkAdd)
		{
			<DrawerBulkAddIngredients Model="@BulkAddFormModel" OnFormSubmitted="@HandleBulkAddFormSubmitted" OnCanceled="@HandleCancelClicked" />
		}
	</SideDrawer>

}
