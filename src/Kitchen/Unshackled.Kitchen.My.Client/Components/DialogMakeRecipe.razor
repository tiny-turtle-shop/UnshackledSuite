@using Unshackled.Kitchen.My.Client.Features.Recipes.Models

<MudDialog Gutters="false" Class="dialog-grow h-100">
	<DialogContent>
		<MudSwipeArea OnSwipeEnd="@HandleSwipeEnd" Style="width: 100%; height:100%" Sensitivity="100">
			<MudContainer>
				<div class="d-flex flex-column h-100">
					<div class="d-flex align-center justify-space-between d-md-none flex-row">
						<div>
							<MudIconButton Icon="@Icons.Material.Filled.ChevronLeft" Size="Size.Large" Disabled="@DisableBack" OnClick="@(() => HandleMoveLeft())" />
						</div>
						@if (CanScreenLock)
						{
							<div class="d-flex gap-4 align-center flex-row justify-center">
								<MudSwitch Color="Color.Secondary" Label="Keep Screen On" LabelPosition="LabelPosition.End" T="bool" Value="@IsScreenLocked" ValueChanged="@HandleScreenLocked" />
							</div>
						}
						<div>
							<MudIconButton Icon="@Icons.Material.Filled.ChevronRight" Size="Size.Large" Disabled="@DisableForward" OnClick="@(() => HandleMoveRight())" />
						</div>
					</div>
					@if (CanScreenLock)
					{
						<div class="d-none d-md-flex gap-4 mb-6 flex-row justify-center">
							<MudSwitch Color="Color.Secondary" Label="Keep Screen On" LabelPosition="LabelPosition.End" T="bool" Value="@IsScreenLocked" ValueChanged="@HandleScreenLocked" />
						</div>
					}
					<div class="flex-grow-1">
						<MudGrid Justify="Justify.SpaceBetween" Class="align-start h-100">
							<MudItem md="1" Class="d-none d-md-block">
								<MudIconButton Icon="@Icons.Material.Filled.ChevronLeft" Size="Size.Large" Disabled="@DisableBack" OnClick="@(() => HandleMoveLeft())" />
							</MudItem>
							<MudItem xs="12" md="10" Class="h-100">
								@foreach (var recipe in Recipes)
								{
									<div class="recipe-dialog @(recipe.SortOrder == state.MakeItIndex ? "d-flex" : "d-none")">
										<MudText Typo="Typo.h4" Align="Align.Center">@recipe.Title</MudText>
										<MudToolBar Gutters="false" Dense="true">
											<MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="@(() => HandleDeleteRecipeClicked(recipe))">Remove</MudButton>
											<ScaleMenuComponent Scale="@recipe.Scale" ScaleChanged="@((decimal value) => HandleScaleChanged(recipe, value))" />
										</MudToolBar>
										<GroupedList Groups="@recipe.Groups" Items="@recipe.Ingredients">
											<GroupRenderer>
												<div class="d-flex flex-row gap-2 align-center mt-4 mb-2">
													<div>
														<MudCheckBox T="bool?" Dense="true" Color="Color.Secondary" UncheckedColor="Color.Default" Size="Size.Small"
																	 Value="context.IsSelectAll" ValueChanged="@((bool? value) => HandleGroupItemChecked(context, recipe, value))"></MudCheckBox>
													</div>
													<MudText Typo="Typo.subtitle1" Class="flex-grow-1">@context.Title</MudText>
												</div>
											</GroupRenderer>
											<ItemRenderer>
												<div class="d-flex flex-row gap-2 align-center">
													<div>
														<MudCheckBox T="bool" Dense="true" Color="Color.Secondary" UncheckedColor="Color.Default" Size="Size.Small"
																	 Value="context.Item.IsSelected" ValueChanged="@((bool value) => HandleItemChecked(context.Item, recipe, value))"></MudCheckBox>
													</div>
													<div class="flex-grow-1">
														<MudText>
															<IngredientText Amount="@(context.Item.Amount * recipe.Scale)" AmountLabel="@context.Item.AmountLabel"
																				Title="@context.Item.Title" PrepNote="@context.Item.PrepNote" />
														</MudText>
													</div>
												</div>

											</ItemRenderer>
										</GroupedList>
										@if (recipe.Steps.Count > 0)
										{
											<MudText Typo="Typo.h6" Class="mt-6 mb-2">Steps</MudText>
											<ListView Items="@recipe.Steps">
												<ItemRenderer>
													<div class="d-flex flex-row gap-4 align-start">
														<div>
															<MudCheckBox T="bool" Dense="true" Color="Color.Secondary" UncheckedColor="Color.Default" Size="Size.Small"
																		 Value="@context.Item.IsSelected" ValueChanged="@((bool value) => HandleStepChecked(context.Item, value))"></MudCheckBox>
														</div>
														<div class="d-flex flex-row gap-2 justify-space-between">
															<MudDivider Vertical="true" FlexItem="true" />
															<MudText>@(context.Item.SortOrder + 1)</MudText>
															<MudDivider Vertical="true" FlexItem="true" />
														</div>
														<div class="flex-grow-1">
															<MudText>@context.Item.Instructions</MudText>
														</div>
													</div>
												</ItemRenderer>
											</ListView>
										}
									</div>
								}

								<div class="recipe-dialog @(state.MakeItIndex >= Recipes.Count ? "d-flex" : "d-none")">
									<div class="recipe-dialog">
										@if (Recipes.Count > 0)
										{
											<MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Current Recipes</MudText>
											<ListView Items="@Recipes" Class="mb-6">
												<ItemRenderer>
													<div class="d-flex flex-row gap-4 align-center">
														<MudText Class="flex-grow-1">@context.Item.Title</MudText>
														<div>
															<MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => HandleDeleteRecipeClicked(context.Item))" />
														</div>
													</div>
												</ItemRenderer>
											</ListView>
										}
										<div class="d-flex flex-column align-center w-100 mt-8">
											<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => HandleAddRecipeClicked())">Add Recipe</MudButton>
										</div>
									</div>
								</div>
							</MudItem>
							<MudItem md="1" Class="d-none d-md-block">
								<MudIconButton Icon="@Icons.Material.Filled.ChevronRight" Size="Size.Large" Disabled="@DisableForward" OnClick="@(() => HandleMoveRight())" />
							</MudItem>
						</MudGrid>
					</div>
				</div>
			</MudContainer>
		</MudSwipeArea>
	</DialogContent>
</MudDialog>

