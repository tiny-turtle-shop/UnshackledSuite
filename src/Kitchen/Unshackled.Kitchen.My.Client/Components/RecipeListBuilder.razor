@using Unshackled.Kitchen.Core.Models

@inherits RecipeListBuilderBase

<MudText Typo="Typo.body1" Class="my-3">Review product quantities for each ingredient</MudText>
<ListView TItem="AddToShoppingListModel" Items="@ActiveItems" IsLoading="@IsLoading">
	<ItemRenderer>
		<MudGrid Spacing="2" Class="@GetClass(context.Item)">
			<MudItem xs="12">
				<div class="d-flex flex-row gap-4">
					<div class="d-flex flex-row gap-x-2 align-end flex-wrap flex-grow-1">
						<MudText Typo="Typo.body1">@context.Item.ProductTitle.ToUpper()</MudText>
						<MudText Typo="Typo.body2">for @context.Item.IngredientTitle</MudText>
					</div>
					<div>
						<MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="@(() => HandleToggleSkipped(context.Item))" />
					</div>
				</div>
			</MudItem>
			@if (context.Item.IsUnitMismatch) 
			{
				<MudItem xs="12">
					<MudAlert Severity="Severity.Error" NoIcon="true" Elevation="0" Dense="true">
						<MudText Typo="Typo.caption">
							Recipe ingredient unit and product serving size unit are incompatible. The required quantity could not be calculated.
						</MudText>
					</MudAlert>
				</MudItem>
			}
			<MudItem xs="12">
				<MudGrid Spacing="1">
					<MudItem xs="6" sm="3">
						<CaptionedProperty Title="Amount Required">
							<IngredientText Amount="@context.Item.RequiredAmount" AmountLabel="@context.Item.RequiredAmountLabel" />
						</CaptionedProperty>
					</MudItem>
					<MudItem xs="6" sm="3">
						<CaptionedProperty Title="Quantity To Add">
							<div class="d-flex gap-4 align-center flex-row">
								<MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline" Color="Color.Secondary" Size="Size.Small" OnClick="@(() => HandleCounterSubtractClicked(context.Item))" />
								<MudText>@context.Item.Quantity</MudText>
								<MudIconButton Icon="@Icons.Material.Filled.AddCircleOutline" Color="Color.Secondary" Size="Size.Small" OnClick="@(() => HandleCounterAddClicked(context.Item))" />
							</div>
						</CaptionedProperty>
					</MudItem>
					<MudItem xs="6" sm="3">
						<CaptionedProperty Title="Quantity In List">
							<MudText>@context.Item.QuantityInList</MudText>
						</CaptionedProperty>
					</MudItem>
					<MudItem xs="6" sm="3">
						<CaptionedProperty Title="Total After Add">
							<MudText>@context.Item.TotalQuantity</MudText>
						</CaptionedProperty>
					</MudItem>
					@if (context.Item.RecipeAmounts.Any())
					{
						<MudItem xs="12">
							<div class="d-flex flex-column gap-1 mb-2">
								<MudText Typo="Typo.body2">Other Recipe Requirements: </MudText>
								@foreach (var amt in context.Item.RecipeAmounts)
								{
									<MudText Typo="Typo.body2">
										<IngredientText Amount="@amt.Amount" AmountLabel="@amt.UnitLabel" Title="@amt.RecipeTitle" />
									</MudText>
								}
							</div>
						</MudItem>
					}
				</MudGrid>
			</MudItem>
		</MudGrid>
	</ItemRenderer>
	<EmptyListRenderer>
		<MudText Align="Align.Center" Class="mt-4">Nothing to add.</MudText>
	</EmptyListRenderer>
</ListView>

@if (SkippedItems.Count > 0)
{
	<div class="d-flex flex-row gap-4 align-center mt-2">
		<MudText Typo="Typo.body1" Class="flex-grow-1">@SkippedItems.Count.CountLabel("SKIPPED PRODUCT", "SKIPPED PRODUCTS")</MudText>
		<div>
			<MudIconButton Icon="@(IsCollapsed ? Icons.Material.Filled.ArrowDropDown : Icons.Material.Filled.ArrowDropUp)" Size="Size.Small"
						   title="@(IsCollapsed ? "Collapse" : "Expand")" OnClick="@(() => IsCollapsed = !IsCollapsed)" />
		</div>
	</div>
	<MudDivider DividerType="DividerType.FullWidth" Class="@(IsCollapsed ? "d-block my-2" : "d-none" )" />
	<div class="@(IsCollapsed ? "d-none" : "d-block mb-6")">
		<ListView TItem="AddToShoppingListModel" Items="@SkippedItems" IsLoading="@IsLoading">
			<ItemRenderer>
				<div class="d-flex flex-row gap-4">
					<div>
						<MudIconButton Icon="@Icons.Material.Filled.AddCircle" Size="Size.Small" OnClick="@(() => HandleToggleSkipped(context.Item))" />
					</div>
					<div class="d-flex flex-row gap-x-2 align-end flex-wrap flex-grow-1">
						<MudText Typo="Typo.body1">@context.Item.ProductTitle.ToUpper()</MudText>
						<MudText Typo="Typo.body2">for @context.Item.IngredientTitle</MudText>
					</div>
				</div>
			</ItemRenderer>
		</ListView>
	</div>
}

@if (ActionToolbar != null)
{
	<MudToolBar Gutters="false" Class="my-6">
		@ActionToolbar
	</MudToolBar>
}