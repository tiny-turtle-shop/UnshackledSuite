@page "/account/external-login"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Unshackled.Studio.Core.Client
@using Unshackled.Studio.Core.Client.Configuration
@using Unshackled.Studio.Core.Data.Entities
@using Unshackled.Studio.Core.Server.Extensions

@inject SignInManager<UserEntity> SignInManager
@inject UserManager<UserEntity> UserManager
@inject IUserStore<UserEntity> UserStore
@inject IEmailSender<UserEntity> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger
@inject SiteConfiguration SiteConfig

@code {
	private ExternalLoginInfo? externalLoginInfo;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromQuery]
	private string? RemoteError { get; set; }

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	[SupplyParameterFromQuery]
	private string? Action { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (RemoteError is not null)
		{
			RedirectManager.RedirectToWithStatus("account/login", $"Error from external provider: {RemoteError}", HttpContext);
		}

		var info = await SignInManager.GetExternalLoginInfoAsync();
		if (info is null)
		{
			RedirectManager.RedirectToWithStatus("account/login", "Error loading external login information.", HttpContext);
		}

		externalLoginInfo = info;

		if (HttpMethods.IsGet(HttpContext.Request.Method))
		{
			if (Action == Globals.LoginCallbackAction)
			{
				await OnLoginCallbackAsync();
				return;
			}

			// We should only reach this page via the login callback, so redirect back to
			// the home page if we get here some other way.
			RedirectManager.RedirectTo("/");
		}
	}

	private async Task OnLoginCallbackAsync()
	{
		if (externalLoginInfo is null)
		{
			RedirectManager.RedirectToWithStatus("account/login", "Error loading external login information.", HttpContext);
		}

		// Sign in the user with this external login provider if the user already has a login.
		var result = await SignInManager.ExternalLoginSignInAsync(
			externalLoginInfo.LoginProvider,
			externalLoginInfo.ProviderKey,
			isPersistent: false,
			bypassTwoFactor: true);

		if (result.Succeeded)
		{
			Logger.LogInformation(
				"{Name} logged in with {LoginProvider} provider.",
				externalLoginInfo.Principal.Identity?.Name,
				externalLoginInfo.LoginProvider);
			RedirectManager.RedirectTo(ReturnUrl);
		}
		else if (result.IsLockedOut)
		{
			RedirectManager.RedirectTo("account/lockout");
		}

		// Login Failed, check if user has local account
		string email = externalLoginInfo.Principal.GetEmailClaim();
		var user = await UserManager.FindByNameAsync(email);

		// Has account with another login method
		if (user != null)
		{
			var createResult = await UserManager.AddLoginAsync(user, externalLoginInfo);
			if (createResult.Succeeded)
			{
				Logger.LogInformation("User created an account using {Name} provider.", externalLoginInfo.LoginProvider);
				await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
				RedirectManager.RedirectTo(ReturnUrl);
			}
			else
			{
				RedirectManager.RedirectToWithStatus("account/login", $"Could not add {externalLoginInfo.LoginProvider} login. Please log in using another method.", HttpContext);
			}
		}
		// If the user does not have an account, create an account.
		else if (user == null && SiteConfig.AllowRegistration)
		{
			if (!string.IsNullOrEmpty(email) && email.Contains("@"))
			{
				var emailStore = GetEmailStore();
				user = CreateUser();

				await UserStore.SetUserNameAsync(user, email, CancellationToken.None);
				await emailStore.SetEmailAsync(user, email, CancellationToken.None);
				if (SiteConfig.RequireConfirmedAccount)
					await emailStore.SetEmailConfirmedAsync(user, true, CancellationToken.None);

				var createResult = await UserManager.CreateAsync(user);
				if (createResult.Succeeded)
				{
					createResult = await UserManager.AddLoginAsync(user, externalLoginInfo);
					if (createResult.Succeeded)
					{
						Logger.LogInformation("User created an account using {Name} provider.", externalLoginInfo.LoginProvider);
						await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
						RedirectManager.RedirectTo(ReturnUrl);
					}
					else
					{
						RedirectManager.RedirectToWithStatus("account/login", $"Could not add {externalLoginInfo.LoginProvider} login. Please log in using another method.", HttpContext);
					}
				}
				else
				{
					RedirectManager.RedirectToWithStatus("account/login", $"Could not create your user account.", HttpContext);
				}
			}

			RedirectManager.RedirectToWithStatus("account/login", "No email address provided in with external login information.", HttpContext);
		}
		else
		{
			RedirectManager.RedirectToWithStatus("account/login", "New accounts are not permitted at this time.", HttpContext);
		}
	}

    private UserEntity CreateUser()
    {
        try
        {
            return Activator.CreateInstance<UserEntity>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(UserEntity)}'. " +
                $"Ensure that '{nameof(UserEntity)}' is not an abstract class and has a parameterless constructor");
        }
    }

    private IUserEmailStore<UserEntity> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<UserEntity>)UserStore;
    }
}
