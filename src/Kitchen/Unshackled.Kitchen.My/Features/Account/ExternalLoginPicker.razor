@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Unshackled.Studio.Core.Data.Entities
@using Unshackled.Studio.Core.Server.Extensions

@inject SignInManager<UserEntity> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length > 0)
{
	<div class="d-flex justify-content-center mt-6 flex-row flex-wrap gap-2">
		@foreach (var provider in externalLogins)
		{
			<form action="account/perform-external-login" method="post">
				<AntiforgeryToken />
				<input type="hidden" name="Provider" value="@provider.Name">
				<input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Default" StartIcon="@provider.Name.GetBrandIcon()">
					Continue with @provider.DisplayName
				</MudButton>
			</form>
		}
	</div>

	<MudText Typo="Typo.h6" Align="Align.Center" Class="mt-4">&mdash; OR &mdash;</MudText>
}

@code {
	private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}
