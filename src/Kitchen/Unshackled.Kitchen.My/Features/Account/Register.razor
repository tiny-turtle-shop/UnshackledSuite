@page "/account/register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Unshackled.Kitchen.Core.Data
@using Unshackled.Kitchen.My.Extensions
@using Unshackled.Kitchen.My.Services
@using Unshackled.Studio.Core.Client.Configuration
@using Unshackled.Studio.Core.Data.Entities

@inject UserManager<UserEntity> UserManager
@inject IUserStore<UserEntity> UserStore
@inject SignInManager<UserEntity> SignInManager
@inject IEmailSender<UserEntity> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject SiteConfiguration SiteConfig
@inject KitchenDbContext db;

<PageTitle>Create A New Account</PageTitle>

<ExternalLoginPicker />

<MudText Typo="Typo.h6" Class="mb-3">Create A New Account</MudText>
<StatusMessage Message="@Message" />
<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" class="disable-on-submit">
	<DataAnnotationsValidator />
	<div class="form-floating mb-3">
		<InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
		<label for="email">Email</label>
		<ValidationMessage For="() => Input.Email" class="text-danger mt-2" />
	</div>
	<div class="form-floating mb-3">
		<InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
		<label for="password">Password</label>
		<ValidationMessage For="() => Input.Password" class="text-danger mt-2" />
	</div>
	<div class="form-floating mb-3">
		<InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
		<label for="confirm-password">Confirm Password</label>
		<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger mt-2" />
	</div>
	<MudToolBar Gutters="false">
		<MudSpacer />
		<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary">Register</MudButton>
		<MudButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" Color="Color.Secondary" Class="ms-2"
				   Href="@(NavigationManager.GetUriWithQueryParameters("account/login", new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl }))">Cancel</MudButton>
		<MudSpacer />
	</MudToolBar>
</EditForm>

@code {
	private IEnumerable<IdentityError>? identityErrors;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery(Name = "returnUrl")]
	private string? ReturnUrl { get; set; }

	private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

	protected override void OnInitialized()
	{
		if (!SiteConfig.AllowRegistration)
		{
			RedirectManager.RedirectTo("account/login", new() { ["returnUrl"] = ReturnUrl });
		}
	}

	public async Task RegisterUser(EditContext editContext)
	{
		var user = CreateUser();

		await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
		var emailStore = GetEmailStore();
		await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
		var result = await UserManager.CreateAsync(user, Input.Password);

		if (!result.Succeeded)
		{
			identityErrors = result.Errors;
			return;
		}

		Logger.LogInformation("User created a new account with password.");

		var userId = await UserManager.GetUserIdAsync(user);
		var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
		code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
		var callbackUrl = NavigationManager.GetUriWithQueryParameters(
			NavigationManager.ToAbsoluteUri("account/confirm-email").AbsoluteUri,
			new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

		await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

		if (UserManager.Options.SignIn.RequireConfirmedAccount)
		{
			RedirectManager.RedirectTo(
				"account/register-confirmation",
				new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
			return;
		}

		await SignInManager.SignInAsync(user, isPersistent: false);
		RedirectManager.RedirectTo(ReturnUrl);
	}

	private UserEntity CreateUser()
	{
		try
		{
			return Activator.CreateInstance<UserEntity>();
		}
		catch
		{
			throw new InvalidOperationException($"Can't create an instance of '{nameof(UserEntity)}'. " +
				$"Ensure that '{nameof(UserEntity)}' is not an abstract class and has a parameterless constructor.");
		}
	}

	private IUserEmailStore<UserEntity> GetEmailStore()
	{
		if (!UserManager.SupportsUserEmail)
		{
			throw new NotSupportedException("The default UI requires a user store with email support.");
		}
		return (IUserEmailStore<UserEntity>)UserStore;
	}

	private sealed class InputModel
	{
		[Required]
		[EmailAddress]
		[Display(Name = "Email")]
		public string Email { get; set; } = "";

		[Required]
		[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		[DataType(DataType.Password)]
		[Display(Name = "Password")]
		public string Password { get; set; } = "";

		[DataType(DataType.Password)]
		[Display(Name = "Confirm password")]
		[Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
		public string ConfirmPassword { get; set; } = "";
	}
}
