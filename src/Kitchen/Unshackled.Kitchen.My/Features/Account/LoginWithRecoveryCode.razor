@page "/account/login-with-recovery-code"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Unshackled.Studio.Core.Data.Entities

@inject SignInManager<UserEntity> SignInManager
@inject UserManager<UserEntity> UserManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWithRecoveryCode> Logger

<PageTitle>Recovery Code Verification</PageTitle>

<MudText Typo="Typo.h6" Class="mb-4">Recovery Code Verification</MudText>
<StatusMessage Message="@message" />
<MudText Class="mb-4">
	You have requested to log in with a recovery code. This login will not be remembered until you provide
	an authenticator app code at log in or disable 2FA and log in again.
</MudText>
<EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post" class="disable-on-submit">
	<DataAnnotationsValidator />
	<ValidationSummary class="text-danger" role="alert" />
	<div class="form-floating mb-3">
		<InputText @bind-Value="Input.RecoveryCode" class="form-control" autocomplete="off" placeholder="RecoveryCode" />
		<label for="recovery-code" class="form-label">Recovery Code</label>
		<ValidationMessage For="() => Input.RecoveryCode" class="text-danger" />
	</div>
	<MudToolBar Gutters="false">
		<MudSpacer />
		<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary">Log In</MudButton>
		<MudButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" Color="Color.Secondary" Class="ms-2"
				   Href="@(NavigationManager.GetUriWithQueryParameters("account/login", new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl }))">Cancel</MudButton>
		<MudSpacer />
	</MudToolBar>
</EditForm>

@code {
	private string? message;
	private UserEntity user = default!;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	protected override async Task OnInitializedAsync()
	{
		// Ensure the user has gone through the username & password screen first
		user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
			throw new InvalidOperationException("Unable to load two-factor authentication user.");
	}

	private async Task OnValidSubmitAsync()
	{
		var recoveryCode = Input.RecoveryCode.Replace(" ", string.Empty);

		var result = await SignInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

		var userId = await UserManager.GetUserIdAsync(user);

		if (result.Succeeded)
		{
			Logger.LogInformation("User with ID '{UserId}' logged in with a recovery code.", userId);
			RedirectManager.RedirectTo(ReturnUrl);
		}
		else if (result.IsLockedOut)
		{
			Logger.LogWarning("User account locked out.");
			RedirectManager.RedirectTo("account/lockout");
		}
		else
		{
			Logger.LogWarning("Invalid recovery code entered for user with ID '{UserId}' ", userId);
			message = "Error: Invalid recovery code entered.";
		}
	}

	private sealed class InputModel
	{
		[Required]
		[DataType(DataType.Text)]
		[Display(Name = "Recovery Code")]
		public string RecoveryCode { get; set; } = "";
	}
}
