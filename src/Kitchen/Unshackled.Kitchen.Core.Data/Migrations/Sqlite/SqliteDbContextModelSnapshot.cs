// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Unshackled.Kitchen.Core.Data;

#nullable disable

namespace Unshackled.Kitchen.Core.Data.Migrations.Sqlite
{
    [DbContext(typeof(SqliteDbContext))]
    partial class SqliteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("uk_Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("uk_RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("uk_UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("uk_UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("uk_UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("uk_UserTokens", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.CookbookEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.ToTable("uk_Cookbooks", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.CookbookInviteEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CookbookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Permissions")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CookbookId");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.ToTable("uk_CookbookInvites", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.CookbookMemberEntity", b =>
                {
                    b.Property<long>("CookbookId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("CookbookId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("uk_CookbookMembers", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.CookbookRecipeEntity", b =>
                {
                    b.Property<long>("CookbookId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CookbookId", "RecipeId");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("MemberId");

                    b.HasIndex("RecipeId");

                    b.ToTable("uk_CookbookRecipes", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.ToTable("uk_Households", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.HouseholdInviteEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Permissions")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.ToTable("uk_HouseholdInvites", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.HouseholdMemberEntity", b =>
                {
                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("HouseholdId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("uk_HouseholdMembers", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ProductBundleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("HouseholdId", "Title");

                    b.ToTable("uk_ProductBundles", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ProductBundleItemEntity", b =>
                {
                    b.Property<long>("ProductBundleId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductBundleId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("uk_ProductBundleItems", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ProductCategoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("Title");

                    b.ToTable("uk_ProductCategories", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ProductEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AddedSugars")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AddedSugarsN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("AddedSugarsUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Biotin")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BiotinN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("BiotinUnit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Calcium")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CalciumN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("CalciumUnit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Calories")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CaloriesFromFat")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Chloride")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ChlorideN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("ChlorideUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Cholesterol")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CholesterolN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("CholesterolUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Choline")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CholineN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("CholineUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Chromium")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ChromiumN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("ChromiumUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Copper")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CopperN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("CopperUnit")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DietaryFiber")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DietaryFiberN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("DietaryFiberUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Folate")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FolateN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("FolateUnit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasNutritionInfo")
                        .HasColumnType("INTEGER");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("InsolubleFiber")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InsolubleFiberN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("InsolubleFiberUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Iodine")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("IodineN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("IodineUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Iron")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("IronN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("IronUnit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Magnesium")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MagnesiumN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("MagnesiumUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Manganese")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ManganeseN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("ManganeseUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Molybdenum")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MolybdenumN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("MolybdenumUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MonounsaturatedFat")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MonounsaturatedFatN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("MonounsaturatedFatUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Niacin")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NiacinN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("NiacinUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PantothenicAcid")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PantothenicAcidN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("PantothenicAcidUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Phosphorus")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PhosphorusN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("PhosphorusUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PolyunsaturatedFat")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PolyunsaturatedFatN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("PolyunsaturatedFatUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Potassium")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PotassiumN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("PotassiumUnit")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProductCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Protein")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProteinN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProteinUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Riboflavin")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RiboflavinN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("RiboflavinUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SaturatedFat")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SaturatedFatN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("SaturatedFatUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Selenium")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SeleniumN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("SeleniumUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ServingSize")
                        .HasPrecision(8, 3)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ServingSizeMetric")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ServingSizeMetricN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("ServingSizeMetricUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ServingSizeN")
                        .HasPrecision(13, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("ServingSizeUnit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServingSizeUnitLabel")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ServingsPerContainer")
                        .HasPrecision(8, 3)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Sodium")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SodiumN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("SodiumUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SolubleFiber")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SolubleFiberN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("SolubleFiberUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SugarAlcohols")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SugarAlcoholsN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("SugarAlcoholsUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Thiamin")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ThiaminN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("ThiaminUnit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalCarbohydrates")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalCarbohydratesN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalCarbohydratesUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalFat")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalFatN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalFatUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalSugars")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalSugarsN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalSugarsUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TransFat")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TransFatN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("TransFatUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("VitaminA")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("VitaminAN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("VitaminAUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("VitaminB12")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("VitaminB12N")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("VitaminB12Unit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("VitaminB6")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("VitaminB6N")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("VitaminB6Unit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("VitaminC")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("VitaminCN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("VitaminCUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("VitaminD")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("VitaminDN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("VitaminDUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("VitaminE")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("VitaminEN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("VitaminEUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("VitaminK")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("VitaminKN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("VitaminKUnit")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Zinc")
                        .HasPrecision(7, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ZincN")
                        .HasPrecision(12, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("ZincUnit")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("HouseholdId", "Title");

                    b.ToTable("uk_Products", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ProductSubstitutionEntity", b =>
                {
                    b.Property<string>("IngredientKey")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("INTEGER");

                    b.HasKey("IngredientKey", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("HouseholdId", "IngredientKey");

                    b.ToTable("uk_ProductSubstitutions", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.RecipeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CookTimeMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrepTimeMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalServings")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("HouseholdId", "Title");

                    b.ToTable("uk_Recipes", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.RecipeIngredientEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasPrecision(8, 3)
                        .HasColumnType("TEXT");

                    b.Property<string>("AmountLabel")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AmountN")
                        .HasPrecision(15, 3)
                        .HasColumnType("TEXT");

                    b.Property<string>("AmountText")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<int>("AmountUnit")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("ListGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrepNote")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("ListGroupId");

                    b.HasIndex("HouseholdId", "Key");

                    b.HasIndex("RecipeId", "SortOrder");

                    b.ToTable("uk_RecipeIngredients", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.RecipeIngredientGroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("RecipeId", "SortOrder");

                    b.ToTable("uk_RecipeIngredientGroups", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.RecipeNoteEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("RecipeId", "SortOrder");

                    b.ToTable("uk_RecipeNotes", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.RecipeStepEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("RecipeId", "SortOrder");

                    b.ToTable("uk_RecipeSteps", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.RecipeTagEntity", b =>
                {
                    b.Property<long>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RecipeId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("uk_RecipeTags", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ShoppingListEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("StoreId");

                    b.HasIndex("HouseholdId", "Title");

                    b.ToTable("uk_ShoppingLists", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ShoppingListItemEntity", b =>
                {
                    b.Property<long>("ShoppingListId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsInCart")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("ShoppingListId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("uk_ShoppingListItems", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ShoppingListRecipeItemEntity", b =>
                {
                    b.Property<long>("ShoppingListId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasPrecision(8, 3)
                        .HasColumnType("TEXT");

                    b.Property<string>("IngredientKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PortionUsed")
                        .HasPrecision(15, 10)
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ShoppingListId", "ProductId", "RecipeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipeId");

                    b.ToTable("uk_ShoppingListRecipeItems", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.StoreEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("HouseholdId", "Title");

                    b.ToTable("uk_Stores", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.StoreLocationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("StoreId");

                    b.HasIndex("HouseholdId", "StoreId", "SortOrder");

                    b.ToTable("uk_StoreLocations", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.StoreProductLocationEntity", b =>
                {
                    b.Property<long>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StoreLocationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreLocationId");

                    b.HasIndex("StoreId", "StoreLocationId", "SortOrder");

                    b.ToTable("uk_StoreProductLocations", (string)null);
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.TagEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("Title");

                    b.HasIndex("HouseholdId", "Key")
                        .IsUnique();

                    b.ToTable("uk_Tags", (string)null);
                });

            modelBuilder.Entity("Unshackled.Studio.Core.Data.Entities.MemberEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppTheme")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("uk_Members", (string)null);
                });

            modelBuilder.Entity("Unshackled.Studio.Core.Data.Entities.MemberMetaEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasMaxLength(450)
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetaKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MemberId", "MetaKey")
                        .IsUnique();

                    b.ToTable("uk_MemberMeta", (string)null);
                });

            modelBuilder.Entity("Unshackled.Studio.Core.Data.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("uk_Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Studio.Core.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.CookbookEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.CookbookInviteEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.CookbookEntity", "Cookbook")
                        .WithMany("Invites")
                        .HasForeignKey("CookbookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cookbook");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.CookbookMemberEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.CookbookEntity", "Cookbook")
                        .WithMany("Memberships")
                        .HasForeignKey("CookbookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cookbook");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.CookbookRecipeEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.CookbookEntity", "Cookbook")
                        .WithMany()
                        .HasForeignKey("CookbookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cookbook");

                    b.Navigation("Household");

                    b.Navigation("Member");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.HouseholdInviteEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany("Invites")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.HouseholdMemberEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany("Memberships")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ProductBundleEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ProductBundleItemEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.ProductBundleEntity", "ProductBundle")
                        .WithMany("Products")
                        .HasForeignKey("ProductBundleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductBundle");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ProductCategoryEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ProductEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.ProductCategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ProductSubstitutionEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.RecipeEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.RecipeIngredientEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.RecipeIngredientGroupEntity", "ListGroup")
                        .WithMany("Ingredients")
                        .HasForeignKey("ListGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("ListGroup");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.RecipeIngredientGroupEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany("Groups")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.RecipeNoteEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany("Notes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.RecipeStepEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.RecipeTagEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.TagEntity", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ShoppingListEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Household");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ShoppingListItemEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.ShoppingListEntity", "ShoppingList")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ShoppingListRecipeItemEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.RecipeEntity", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.ShoppingListEntity", "ShoppingList")
                        .WithMany("RecipeItems")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Recipe");

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.StoreEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.StoreLocationEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.StoreEntity", "Store")
                        .WithMany("Locations")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.StoreProductLocationEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.StoreLocationEntity", "StoreLocation")
                        .WithMany()
                        .HasForeignKey("StoreLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");

                    b.Navigation("StoreLocation");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.TagEntity", b =>
                {
                    b.HasOne("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("Unshackled.Studio.Core.Data.Entities.MemberMetaEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.CookbookEntity", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.HouseholdEntity", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ProductBundleEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ProductCategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.RecipeEntity", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Ingredients");

                    b.Navigation("Notes");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.RecipeIngredientGroupEntity", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.ShoppingListEntity", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("RecipeItems");
                });

            modelBuilder.Entity("Unshackled.Kitchen.Core.Data.Entities.StoreEntity", b =>
                {
                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
