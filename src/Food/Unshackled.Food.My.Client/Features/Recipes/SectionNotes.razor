@inherits SectionNotesBase

@if(IsEditMode || Notes.Any())
{
	<SectionComponent IsEditMode="@IsEditMode" IsEditing="@IsEditing" Class="mb-6">
		<SectionHeader Title="Notes" Typo="Typo.h5" IsEditMode="@IsEditMode" IsEditing="@IsEditing" DisableControls="@DisableControls" Class="mb-4" EditingClass="mb-4"
					   OnCancelClicked="@(() => HandleCancelEditClicked())" OnSaveClicked="HandleUpdateClicked">
			<EditModeToolbar>
				<MudIconButton Icon="@Icons.Material.Filled.Edit" Disabled="@DisableSectionControls" OnClick="@(() => HandleEditClicked())" />
			</EditModeToolbar>
		</SectionHeader>

		@if (!IsEditing)
		{
			<ListView Items="@Notes">
				<ItemRenderer>
					<div class="d-flex flex-row gap-4 align-start">
						<div class="d-flex flex-row gap-2 justify-space-between">
							<MudText>@(context.Item.SortOrder + 1)</MudText>
							<MudDivider Vertical="true" FlexItem="true" />
						</div>
						<div class="flex-grow-1">
							<MudText>@((MarkupString)context.Item.Note.ReplaceLineBreaks("<br />"))</MudText>
						</div>
					</div>
				</ItemRenderer>
				<EmptyListRenderer>
					<MudDivider DividerType="DividerType.FullWidth" Class="my-2" />
					<MudAlert Severity="Severity.Normal" Icon="@Icons.Material.Filled.Info">You have not added any notes.</MudAlert>
					<MudDivider DividerType="DividerType.FullWidth" Class="my-2" />
				</EmptyListRenderer>
			</ListView>
		}
		else
		{
			<SortableListView TItem="FormNoteModel" Items="@FormNotes" SortOrderChanged="@HandleSortChanged" IsSortingChanged="@HandleIsSorting" 
				ToolbarPosition="ToolbarPositions.Top" ToolbarAlignment="HorizontalAlignment.Left" DisableSort="@DisableControls">
				<ItemRenderer>
					<div class="d-flex flex-row gap-4 align-start">
						<div class="d-flex flex-row gap-2 justify-space-between">
							<MudText>@(context.Item.SortOrder + 1)</MudText>
							<MudDivider Vertical="true" FlexItem="true" />
						</div>
						<div class="flex-grow-1">
							<MudText>@((MarkupString)context.Item.Note.ReplaceLineBreaks("<br />"))</MudText>
						</div>
						<div>
							<MudIconButton Icon="@Icons.Material.Filled.ChevronRight" Disabled="@DisableControls" OnClick="@(() => HandleEditItemClicked(context.Item))" />
						</div>
					</div>
				</ItemRenderer>
				<ListTools>
					<MudButton Variant="Variant.Text" Color="Color.Default" StartIcon="@Icons.Material.Filled.AddCircle" Disabled="@DisableControls"
								OnClick="@(() => HandleAddClicked())">Add</MudButton>
				</ListTools>
				<DraggableItemRenderer>
					<MudPaper Elevation="2" Class="pa-4 my-4">
						<MudGrid Spacing="2" Class="align-stretch">
							<MudItem xs="1">
								<MudIcon Icon="@Icons.Material.Filled.DragHandle" />
							</MudItem>
							<MudItem xs="11">
								<MudText>@context.Note.ToShortString(50, "...")</MudText>
							</MudItem>
						</MudGrid>
					</MudPaper>
				</DraggableItemRenderer>
			</SortableListView>
		}

		<SideDrawer Title="@DrawerTitle" Open="@DrawerOpen" OpenChanged="@(() => HandleCancelClicked())">
			@if (DrawerView == Views.AddNote)
			{
				<DrawerNote Model="@CurrentFormModel" DisableFormControls="@DisableControls" IsAdding="true" OnFormSubmitted="@HandleAddFormSubmitted" OnCanceled="@HandleCancelClicked" />
			}
			else if (DrawerView == Views.EditNote)
			{
				<DrawerNote Model="@CurrentFormModel" DisableFormControls="@DisableControls" IsAdding="false" OnFormSubmitted="@HandleEditFormSubmitted" OnDeleted="@HandleDeleteClicked" OnCanceled="@HandleCancelClicked" />
			}
		</SideDrawer>
	</SectionComponent>
}