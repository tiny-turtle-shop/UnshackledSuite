@page "/account/login-with-2fa"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Unshackled.Studio.Core.Data.Entities

@inject SignInManager<UserEntity> SignInManager
@inject UserManager<UserEntity> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger

<PageTitle>Two-factor Authentication</PageTitle>

<MudText Typo="Typo.h6" Class="mb-4">Two-factor Authentication</MudText>
<MudText>Your login is protected with an authenticator app. Enter your authenticator code below.</MudText>
<StatusMessage Message="@message" />
<MudGrid Justify="Justify.SpaceAround">
	<MudItem xs="12" sm="10" md="8" lg="6">
		<EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post" class="disable-on-submit">
			<input type="hidden" name="returnUrl" value="@ReturnUrl" />
			<input type="hidden" name="rememberMe" value="@RememberMe" />
			<DataAnnotationsValidator />
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.TwoFactorCode" class="form-control" autocomplete="off" />
				<label for="two-factor-code" class="form-label">Authenticator code</label>
				<ValidationMessage For="() => Input.TwoFactorCode" class="text-danger" />
			</div>
			<div class="checkbox mb-3">
				<label for="remember-machine" class="form-label">
					<InputCheckbox @bind-Value="Input.RememberMachine" />
					Remember this machine
				</label>
			</div>
			<MudToolBar Gutters="false" Class="mb-3">
				<MudSpacer />
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary">Log in</MudButton>
				<MudSpacer />
			</MudToolBar>
		</EditForm>
	</MudItem>
</MudGrid>
<MudText Typo="Typo.body2">
	Don't have access to your authenticator device? You can
	<MudLink Color="Color.Secondary" Href="@($"account/login-with-recovery-code?returnUrl={ReturnUrl}")">log in with a recovery code</MudLink>.
</MudText>

@code {
	private string? message;
	private UserEntity user = default!;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery(Name = "returnUrl")]
	private string? ReturnUrl { get; set; }

	[SupplyParameterFromQuery(Name = "rememberMe")]
	private bool RememberMe { get; set; }

	protected override async Task OnInitializedAsync()
	{
		// Ensure the user has gone through the username & password screen first
		user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
			throw new InvalidOperationException("Unable to load two-factor authentication user.");
	}

	private async Task OnValidSubmitAsync()
	{
		var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
		var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
		var userId = await UserManager.GetUserIdAsync(user);

		if (result.Succeeded)
		{
			Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
			RedirectManager.RedirectTo(ReturnUrl);
		}
		else if (result.IsLockedOut)
		{
			Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
			RedirectManager.RedirectTo("account/lockout");
		}
		else
		{
			Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
			message = "Error: Invalid authenticator code.";
		}
	}

	private sealed class InputModel
	{
		[Required]
		[StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		[DataType(DataType.Text)]
		[Display(Name = "Authenticator code")]
		public string? TwoFactorCode { get; set; }

		[Display(Name = "Remember this machine")]
		public bool RememberMachine { get; set; }
	}
}
