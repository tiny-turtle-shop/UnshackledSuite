<MudSelect T="DietTypes" Label="Diet" FullWidth="true" Variant="Variant.Outlined" MultiSelection="@MultiSelection"
		   Margin="@Margin" Disabled="@Disabled" Value="@Value" ValueChanged="@ValueChanged"
		   SelectedValues="@SelectedValues" SelectedValuesChanged="@SelectedValuesChanged"
		   MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))">
	@if (AllOption)
	{
		<MudSelectItem T="DietTypes" Value="@DietTypes.Any">@DietTypes.Any.Title()</MudSelectItem>
	}
	@foreach (var item in EnumUtils.GetSortedValues<DietTypes>())
	{
		@if (item > DietTypes.Any)
		{
			<MudSelectItem T="DietTypes" Value="@item">@item.Title()</MudSelectItem>
		}
	}
</MudSelect>

@code {
	[Parameter] public DietTypes Value { get; set; }
	[Parameter] public IEnumerable<DietTypes> SelectedValues { get; set; } = new HashSet<DietTypes>();
	[Parameter] public bool AllOption { get; set; } = false;
	[Parameter] public bool MultiSelection { get; set; } = false;
	[Parameter] public bool Disabled { get; set; } = false;
	[Parameter] public EventCallback<DietTypes> ValueChanged { get; set; }
	[Parameter] public EventCallback<IEnumerable<DietTypes>> SelectedValuesChanged { get; set; }
	[Parameter] public Margin Margin { get; set; } = Margin.Normal;

	private string GetMultiSelectionText(List<string> selectedValues)
	{
		List<DietTypes> selected = selectedValues
			.Select(x => (DietTypes)Enum.Parse(typeof(DietTypes), x))
			.ToList();
		return string.Join(", ", selected.Select(x => x.Title()));
	}
}
