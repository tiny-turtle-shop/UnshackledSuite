<MudSelect T="CuisineTypes" Label="Cuisine" FullWidth="true" Variant="Variant.Outlined" MultiSelection="@MultiSelection"
		   Margin="@Margin" Disabled="@Disabled" Value="@Value" ValueChanged="@ValueChanged"
		   SelectedValues="@SelectedValues" SelectedValuesChanged="@SelectedValuesChanged"
		   MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))">
	@if (AllOption)
	{
		<MudSelectItem T="CuisineTypes" Value="@CuisineTypes.Any">@CuisineTypes.Any.Title()</MudSelectItem>
	}
	@foreach (var item in EnumUtils.GetSortedValues<CuisineTypes>())
	{
		@if (item > CuisineTypes.Any)
		{
			<MudSelectItem T="CuisineTypes" Value="@item">@item.Title()</MudSelectItem>
		}
	}
</MudSelect>

@code {
	[Parameter] public CuisineTypes Value { get; set; }
	[Parameter] public IEnumerable<CuisineTypes> SelectedValues { get; set; } = new HashSet<CuisineTypes>();
	[Parameter] public bool AllOption { get; set; } = false;
	[Parameter] public bool MultiSelection { get; set; } = false;
	[Parameter] public bool Disabled { get; set; } = false;
	[Parameter] public EventCallback<CuisineTypes> ValueChanged { get; set; }
	[Parameter] public EventCallback<IEnumerable<CuisineTypes>> SelectedValuesChanged { get; set; }
	[Parameter] public Margin Margin { get; set; } = Margin.Normal;

	private string GetMultiSelectionText(List<string> selectedValues)
	{
		List<CuisineTypes> selected = selectedValues
			.Select(x => (CuisineTypes)Enum.Parse(typeof(CuisineTypes), x))
			.ToList();
		return string.Join(", ", selected.Select(x => x.Title()));
	}
}
