@page "/cookbook-recipes/{RecipeSid}"
@inherits SingleBase

<DynamicPageTitle  IsLoading="@IsLoading" LoadingTitle="Loading Recipe" FallbackTitle="Recipe" Title="@Recipe.Title" />

<MudBreadcrumbs Items="Breadcrumbs"></MudBreadcrumbs>

@if (IsLoading)
{
	<DefaultProgress />
}
else
{
	@if (string.IsNullOrEmpty(Recipe.Sid))
	{
		<MudAlert Severity="Severity.Error" Dense="true">The recipe was not found.</MudAlert>
	}
	else
	{
		@if (State.ActiveMember.IsActive)
		{
			<MudToolBar Gutters="false" Dense="true" Class="mb-4">
				<MudButton StartIcon="@Icons.Material.Filled.FileCopy" OnClick="@(() => HandleCopyToClicked())">Copy to...</MudButton>
				@if (CanDelete)
				{
					<MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="@(() => HandleDeleteClicked())">Remove from Cookbook</MudButton>
				}
			</MudToolBar>
		}

		<SectionProperties @bind-Recipe="@Recipe" Scale="@Scale" />

		<SectionIngredients Groups="@Recipe.Groups" Ingredients="@Recipe.Ingredients" @bind-Scale="Scale" />

		<SectionSteps Steps="@Recipe.Steps" />

		<SectionNotes Notes="@Recipe.Notes" />

		<SideDrawer Title="@DrawerTitle" Open="@DrawerOpen" OpenChanged="@(() => HandleCancelClicked())">
			@if (DrawerView == Views.Copy)
			{
				<DrawerCopy Recipe="@Recipe" OnCancelClicked="@HandleCancelClicked" />
			}
		</SideDrawer>
	}
}