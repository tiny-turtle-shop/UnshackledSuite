<MudSelect T="string" Label="@Label" FullWidth="@FullWidth" Variant="Variant.Outlined" MultiSelection="true" Text="@Text"
		   Margin="@Margin" Disabled="@Disabled" SelectedValues="@SelectedValues" SelectedValuesChanged="@HandleSelectedValuesChanged" 
		   MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))">

	@foreach (var item in Tags)
	{
		<MudSelectItem T="string" Value="@item.TagKey">@item.Title</MudSelectItem>
	}

</MudSelect>

@code {
	[Parameter] public bool Disabled { get; set; } = false;
	[Parameter] public bool FullWidth { get; set; }
	[Parameter] public string Label { get; set; } = "Tags";
	[Parameter] public Margin Margin { get; set; } = Margin.Normal;
	[Parameter] public List<string> SelectedValues { get; set; } = new List<string>();
	[Parameter] public EventCallback<List<string>> SelectedValuesChanged { get; set; }
	[Parameter] public List<RecipeTagSelectItem> Tags { get; set; } = [];

	private string Text = string.Empty;

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		_ = GetMultiSelectionText(SelectedValues);
	}

	private string GetMultiSelectionText(List<string> selectedValues)
	{
		var selectedTitles = Tags
			.Where(x => selectedValues.Contains(x.TagKey))
			.Select(x => x.Title)
			.ToList();

		Text = string.Join(", ", selectedTitles);
		return Text;
	}

	private void HandleSelectedValuesChanged(IEnumerable<string?> selected) 
	{
		SelectedValues = selected.Select(x => x ?? string.Empty).ToList();
		SelectedValuesChanged.InvokeAsync(SelectedValues);
	}
}
