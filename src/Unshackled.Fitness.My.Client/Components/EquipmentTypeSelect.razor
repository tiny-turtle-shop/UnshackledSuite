@using System.Linq.Expressions
@if (MultiSelection)
{
	<MudSelect T="EquipmentTypes" Label="Equipment" FullWidth="true" Variant="Variant.Outlined" MultiSelection="@MultiSelection"
			   Margin="@Margin" Disabled="@Disabled" SelectedValues="@SelectedValues" SelectedValuesChanged="@SelectedValuesChanged"
			   MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" For="@For">
		@if (AllOption)
		{
			<MudSelectItem T="EquipmentTypes" Value="@EquipmentTypes.Any">@EquipmentTypes.Any.Title()</MudSelectItem>
		}
		@foreach (var item in EnumUtils.GetSortedValues<EquipmentTypes>())
		{
			@if (item != EquipmentTypes.Any)
			{
				<MudSelectItem T="EquipmentTypes" Value="@item">@item.Title()</MudSelectItem>
			}
		}
	</MudSelect>
}
else
{
	<MudSelect T="EquipmentTypes" Label="Equipment" FullWidth="true" Variant="Variant.Outlined" Margin="@Margin" Disabled="@Disabled"
			   Value="@Value" ValueChanged="@ValueChanged" For="@For">
		@if (AllOption)
		{
			<MudSelectItem T="EquipmentTypes" Value="@EquipmentTypes.Any">@EquipmentTypes.Any.Title()</MudSelectItem>
		}
		@foreach (var item in EnumUtils.GetSortedValues<EquipmentTypes>())
		{
			@if (item != EquipmentTypes.Any)
			{
				<MudSelectItem T="EquipmentTypes" Value="@item">@item.Title()</MudSelectItem>
			}
		}
	</MudSelect>
}

@code {
	[Parameter] public EquipmentTypes Value { get; set; }
	[Parameter] public IEnumerable<EquipmentTypes> SelectedValues { get; set; } = new List<EquipmentTypes>();
	[Parameter] public bool AllOption { get; set; } = false;
	[Parameter] public bool MultiSelection { get; set; } = false;
	[Parameter] public bool Disabled { get; set; } = false;
	[Parameter] public EventCallback<EquipmentTypes> ValueChanged { get; set; }
	[Parameter] public EventCallback<IEnumerable<EquipmentTypes>> SelectedValuesChanged { get; set; }
	[Parameter] public Margin Margin { get; set; } = Margin.None;
	[Parameter] public Expression<Func<EquipmentTypes>>? For { get; set; }

	private string GetMultiSelectionText(List<string> selectedValues)
	{
		List<EquipmentTypes> selected = selectedValues
			.Select(x => (EquipmentTypes)Enum.Parse(typeof(EquipmentTypes), x))
			.ToList();
		return string.Join(", ", selected.Select(x => x.Title()));
	}
}
