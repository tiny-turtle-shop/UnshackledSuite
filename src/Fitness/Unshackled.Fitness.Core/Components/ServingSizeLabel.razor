@using MudBlazor.Utilities
@using Unshackled.Fitness.Core.Models.Recipes

<span class="@CssClass">@GetServingSizeLabel()</span>

@code {
	[Parameter] public decimal ServingSize { get; set; }
	[Parameter] public ServingSizeUnits ServingSizeUnit { get; set; }
	[Parameter] public string ServingSizeUnitLabel { get; set; } = string.Empty;
	[Parameter] public decimal ServingSizeMetric { get; set; }
	[Parameter] public ServingSizeMetricUnits ServingSizeMetricUnit { get; set; }
	[Parameter] public bool IsStacked { get; set; } = false;
	[Parameter] public Align Align { get; set; } = Align.Inherit;

	protected string CssClass => new CssBuilder("label-unit")
		.AddClass(IsStacked ? "label-unit-stacked" : string.Empty)
		.AddClass(Align == Align.Center ? "justify-center align-center" : string.Empty)
		.AddClass(Align == Align.End ? "justify-end" : string.Empty)
		.Build();

	protected MarkupString GetServingSizeLabel()
	{
		var amount = $"<span class=\"amt\">{ServingSize.ToHtmlFraction()}</span>";
		
		string amountLabel = string.Empty;
		if (ServingSizeUnit == ServingSizeUnits.Item && !string.IsNullOrEmpty(ServingSizeUnitLabel))
		{
			amountLabel = $"<span class=\"amt-label\">{ServingSizeUnitLabel}</span>";
		}
		else
		{
			amountLabel = $"<span class=\"amt-label\">{ServingSizeUnit.Label()}</span>";
		}

		string metricAmount = $"<span class=\"amt\">{ServingSizeMetric.ToString("0.#")}</span>";
		string metricAmountLabel = $"<span class=\"amt-label\">{ServingSizeMetricUnit.Label()}</span>";

		if (ServingSize > 0 && ServingSizeMetric > 0)
		{
			return (MarkupString)$"<span class=\"stack\">{amount}{amountLabel}</span><span class=\"stack\"><span class=\"small-label\">({metricAmount}{metricAmountLabel})</span></span>";
		}
		else if (ServingSize > 0)
		{
			return (MarkupString)$"<span class=\"stack\">{amount}{amountLabel}</span>";
		}
		else if (ServingSizeMetric > 0)
		{
			return (MarkupString)$"<span class=\"stack\">{metricAmount}{metricAmountLabel}</span>";
		}
		else
		{
			return (MarkupString)string.Empty;
		}
	}
}
