@inherits Unshackled.Studio.Core.Client.Components.BaseComponent<Member>

<MudNavMenu>
	<MudNavLink Icon="@Icons.Material.Filled.Dashboard" Href="/" Match="NavLinkMatch.All">Dashboard</MudNavLink>
	<MudNavLink Icon="@Icons.Material.Filled.CalendarMonth" Href="/calendar" Match="NavLinkMatch.Prefix">Calendar</MudNavLink>

	<MudDivider DividerType="DividerType.FullWidth" Class="my-2" />

	<MudNavGroup Title="Activities" Icon="@Icons.Material.Filled.DirectionsRun" Expanded="@isExpanded[menuActivities]" ExpandedChanged="@((bool val) => HandleExpandedChanged(menuActivities, val))">
		<MudNavLink Href="/activities" Match="NavLinkMatch.Prefix">Activities</MudNavLink>
		<MudNavLink Href="/activity-types" Match="NavLinkMatch.Prefix">Activity Types</MudNavLink>
		<MudNavLink Href="/training-sessions" Match="NavLinkMatch.Prefix">Training Sessions</MudNavLink>
		<MudNavLink Href="/training-plans" Match="NavLinkMatch.Prefix">Training Plans</MudNavLink>
	</MudNavGroup>

	<MudNavGroup Title="Strength Training" Icon="@Icons.Material.Filled.FitnessCenter" Expanded="@isExpanded[menuStrenth]" ExpandedChanged="@((bool val) => HandleExpandedChanged(menuStrenth, val))">
		<MudNavLink Href="/workouts" Match="NavLinkMatch.Prefix">Workouts</MudNavLink>
		<MudNavLink Href="/exercises" Match="NavLinkMatch.Prefix">Exercises</MudNavLink>
		<MudNavLink Href="/templates" Match="NavLinkMatch.Prefix">Templates</MudNavLink>
		<MudNavLink Href="/programs" Match="NavLinkMatch.Prefix">Programs</MudNavLink>
	</MudNavGroup>

	<MudNavGroup Title="Metrics" Icon="@Icons.Material.Filled.InsertChart" Expanded="@isExpanded[menuMetrics]" ExpandedChanged="@((bool val) => HandleExpandedChanged(menuMetrics, val))">
		<MudNavLink Href="/metrics" Match="NavLinkMatch.Prefix">All Metrics</MudNavLink>
		<MudNavLink Href="/metric-definitions" Match="NavLinkMatch.Prefix">Definitions</MudNavLink>
	</MudNavGroup>
</MudNavMenu>

@code {
	private const string menuActivities = "MenuActivitesExpanded";
	private const string menuStrenth = "MenuStrengthExpanded";
	private const string menuMetrics = "MenuMetricsExpanded";

	private Dictionary<string, bool> isExpanded = new()
	{
		{menuActivities, true},
		{menuStrenth, true},
		{menuMetrics, true}
	};

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		foreach (string key in isExpanded.Keys)
		{
			isExpanded[key] = await GetLocalBool(key) ?? true;
		}
	}

	private async Task HandleExpandedChanged(string key, bool value)
	{
		isExpanded[key] = value;
		await SaveLocalBool(key, value);
	}

}