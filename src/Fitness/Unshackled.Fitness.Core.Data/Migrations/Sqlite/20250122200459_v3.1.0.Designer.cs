// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Unshackled.Fitness.Core.Data;

#nullable disable

namespace Unshackled.Fitness.Core.Data.Migrations.Sqlite
{
    [DbContext(typeof(SqliteDbContext))]
    [Migration("20250122200459_v3.1.0")]
    partial class v310
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("uf_Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("uf_RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("uf_UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("uf_UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("uf_UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("uf_UserTokens", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ActivityEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ActivityTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AverageCadence")
                        .HasColumnType("REAL");

                    b.Property<int>("AverageCadenceUnit")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AverageHeartRateBpm")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AveragePace")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AveragePower")
                        .HasColumnType("REAL");

                    b.Property<double?>("AverageSpeed")
                        .HasColumnType("REAL");

                    b.Property<double?>("AverageSpeedN")
                        .HasColumnType("REAL");

                    b.Property<int>("AverageSpeedUnit")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateEvent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateEventUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("MaximumAltitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaximumAltitudeN")
                        .HasColumnType("REAL");

                    b.Property<int>("MaximumAltitudeUnit")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("MaximumCadence")
                        .HasColumnType("REAL");

                    b.Property<int>("MaximumCadenceUnit")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaximumHeartRateBpm")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaximumPace")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("MaximumPower")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaximumSpeed")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaximumSpeedN")
                        .HasColumnType("REAL");

                    b.Property<int>("MaximumSpeedUnit")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("MinimumAltitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("MinimumAltitudeN")
                        .HasColumnType("REAL");

                    b.Property<int>("MinimumAltitudeUnit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TargetCadence")
                        .HasColumnType("REAL");

                    b.Property<int>("TargetCadenceUnit")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TargetCalories")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TargetDistance")
                        .HasColumnType("REAL");

                    b.Property<double?>("TargetDistanceN")
                        .HasColumnType("REAL");

                    b.Property<int>("TargetDistanceUnit")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TargetHeartRateBpm")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TargetPace")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TargetPower")
                        .HasColumnType("REAL");

                    b.Property<int?>("TargetTimeSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<double?>("TotalAscent")
                        .HasColumnType("REAL");

                    b.Property<double?>("TotalAscentN")
                        .HasColumnType("REAL");

                    b.Property<int>("TotalAscentUnit")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TotalCalories")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TotalDescent")
                        .HasColumnType("REAL");

                    b.Property<double?>("TotalDescentN")
                        .HasColumnType("REAL");

                    b.Property<int>("TotalDescentUnit")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TotalDistance")
                        .HasColumnType("REAL");

                    b.Property<double?>("TotalDistanceN")
                        .HasColumnType("REAL");

                    b.Property<int>("TotalDistanceUnit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalTimeSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TrainingSessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "DateEventUtc");

                    b.ToTable("uf_Activities", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ActivityTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultCadenceUnits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultDistanceUnits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultElevationUnits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultEventType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultSpeedUnits")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "Title");

                    b.ToTable("uf_ActivityTypes", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ExerciseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultSetMetricType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultSetType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTrackingSplit")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Muscles")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "Title", "IsArchived");

                    b.ToTable("uf_Exercises", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricDefinitionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("HighlightColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOnDashboard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<long>("ListGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxValue")
                        .HasPrecision(2)
                        .HasColumnType("TEXT");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetricType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("ListGroupId");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "ListGroupId", "SortOrder");

                    b.ToTable("uf_MetricDefinitions", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricDefinitionGroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "SortOrder");

                    b.ToTable("uf_MetricDefinitionGroups", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("TEXT");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MetricDefinitionId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RecordedValue")
                        .HasPrecision(15, 3)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MetricDefinitionId");

                    b.HasIndex("MemberId", "MetricDefinitionId", "DateRecorded");

                    b.ToTable("uf_Metrics", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricPresetEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "Title")
                        .IsUnique();

                    b.ToTable("uf_MetricPresets", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProgramEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastWorkoutUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int>("LengthWeeks")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NextTemplateIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgramType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "Title");

                    b.ToTable("uf_Programs", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProgramTemplateEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("DayNumber")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("INTEGER");

                    b.Property<long>("WorkoutTemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("WorkoutTemplateId");

                    b.HasIndex("ProgramId", "WeekNumber", "DayNumber");

                    b.ToTable("uf_ProgramTemplates", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TrainingPlanEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastActivityUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int>("LengthWeeks")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NextSessionIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgramType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "DateStarted");

                    b.HasIndex("MemberId", "Title");

                    b.ToTable("uf_TrainingPlans", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TrainingPlanSessionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("DayNumber")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TrainingPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TrainingSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("TrainingPlanId");

                    b.HasIndex("TrainingSessionId");

                    b.HasIndex("MemberId", "TrainingPlanId", "WeekNumber", "DayNumber", "SortOrder");

                    b.ToTable("uf_TrainingPlanSessions", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TrainingSessionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ActivityTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<double?>("TargetCadence")
                        .HasColumnType("REAL");

                    b.Property<int>("TargetCadenceUnit")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TargetCalories")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TargetDistance")
                        .HasColumnType("REAL");

                    b.Property<double?>("TargetDistanceN")
                        .HasColumnType("REAL");

                    b.Property<int>("TargetDistanceUnit")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TargetHeartRateBpm")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TargetPace")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TargetPower")
                        .HasColumnType("REAL");

                    b.Property<int?>("TargetTimeSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "Title");

                    b.HasIndex("MemberId", "ActivityTypeId", "Title");

                    b.ToTable("uf_TrainingSessions", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCompletedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateStartedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExerciseCount")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MusclesTargeted")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecordSecondsAtWeightCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecordSecondsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecordTargetVolumeCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecordTargetWeightCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecordVolumeCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecordWeightCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SetCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<decimal>("VolumeKg")
                        .HasPrecision(12, 3)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("VolumeLb")
                        .HasPrecision(12, 3)
                        .HasColumnType("TEXT");

                    b.Property<long?>("WorkoutTemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "DateStartedUtc");

                    b.ToTable("uf_Workouts", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutSetEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateRecorded")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateRecordedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("ExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IntensityTarget")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBestSetBySeconds")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBestSetByVolume")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBestSetByWeight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecordSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecordSecondsAtWeight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecordTargetVolume")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecordTargetWeight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecordVolume")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecordWeight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTrackingSplit")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ListGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int>("RepMode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reps")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepsLeft")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepsRight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepsTarget")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Seconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecondsLeft")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecondsRight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecondsTarget")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SetMetricType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SetType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("VolumeKg")
                        .HasPrecision(10, 3)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("VolumeLb")
                        .HasPrecision(10, 3)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WeightKg")
                        .HasPrecision(7, 3)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WeightLb")
                        .HasPrecision(7, 3)
                        .HasColumnType("TEXT");

                    b.Property<long>("WorkoutId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ListGroupId");

                    b.HasIndex("MemberId");

                    b.HasIndex("WorkoutId", "SortOrder");

                    b.ToTable("uf_WorkoutSets", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutSetGroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<long>("WorkoutId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("WorkoutId", "SortOrder");

                    b.ToTable("uf_WorkoutSetGroups", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTaskEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<long>("WorkoutId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("WorkoutId", "Type", "SortOrder");

                    b.ToTable("uf_WorkoutTasks", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int>("ExerciseCount")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MusclesTargeted")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int>("SetCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId", "Title");

                    b.ToTable("uf_WorkoutTemplates", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateSetEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("ExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IntensityTarget")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ListGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepMode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepsTarget")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecondsTarget")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SetMetricType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SetType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<long>("WorkoutTemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ListGroupId");

                    b.HasIndex("MemberId");

                    b.HasIndex("WorkoutTemplateId", "SortOrder");

                    b.ToTable("uf_WorkoutTemplateSets", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateSetGroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<long>("WorkoutTemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("WorkoutTemplateId", "SortOrder");

                    b.ToTable("uf_WorkoutTemplateSetGroups", (string)null);
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateTaskEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<long>("WorkoutTemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("MemberId");

                    b.HasIndex("WorkoutTemplateId", "Type", "SortOrder");

                    b.ToTable("uf_WorkoutTemplateTasks", (string)null);
                });

            modelBuilder.Entity("Unshackled.Studio.Core.Data.Entities.MemberEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppTheme")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateCreatedUtc");

                    b.HasIndex("DateLastModifiedUtc");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("uf_Members", (string)null);
                });

            modelBuilder.Entity("Unshackled.Studio.Core.Data.Entities.MemberMetaEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("MemberId")
                        .HasMaxLength(450)
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetaKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("MetaValue")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("MemberId", "MetaKey")
                        .IsUnique();

                    b.ToTable("uf_MemberMeta", (string)null);
                });

            modelBuilder.Entity("Unshackled.Studio.Core.Data.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .UseCollation("NOCASE");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("uf_Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Studio.Core.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ActivityEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ActivityTypeEntity", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ActivityTypeEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ExerciseEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricDefinitionEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MetricDefinitionGroupEntity", "ListGroup")
                        .WithMany("Definitions")
                        .HasForeignKey("ListGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ListGroup");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricDefinitionGroupEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.MetricDefinitionEntity", "MetricDefinition")
                        .WithMany()
                        .HasForeignKey("MetricDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("MetricDefinition");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricPresetEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProgramEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProgramTemplateEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ProgramEntity", "Program")
                        .WithMany("Templates")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateEntity", "WorkoutTemplate")
                        .WithMany()
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Program");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TrainingPlanEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TrainingPlanSessionEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.TrainingPlanEntity", "Plan")
                        .WithMany("PlanSessions")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.TrainingSessionEntity", "Session")
                        .WithMany()
                        .HasForeignKey("TrainingSessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Plan");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TrainingSessionEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ActivityTypeEntity", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutSetEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ExerciseEntity", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutSetGroupEntity", "ListGroup")
                        .WithMany("Sets")
                        .HasForeignKey("ListGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutEntity", "Workout")
                        .WithMany("Sets")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("ListGroup");

                    b.Navigation("Member");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutSetGroupEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutEntity", "Workout")
                        .WithMany("Groups")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTaskEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutEntity", "Workout")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateSetEntity", b =>
                {
                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.ExerciseEntity", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateSetGroupEntity", "ListGroup")
                        .WithMany("Sets")
                        .HasForeignKey("ListGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateEntity", "WorkoutTemplate")
                        .WithMany("Sets")
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("ListGroup");

                    b.Navigation("Member");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateSetGroupEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateEntity", "WorkoutTemplate")
                        .WithMany("Groups")
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateTaskEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateEntity", "WorkoutTemplate")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("Unshackled.Studio.Core.Data.Entities.MemberMetaEntity", b =>
                {
                    b.HasOne("Unshackled.Studio.Core.Data.Entities.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.MetricDefinitionGroupEntity", b =>
                {
                    b.Navigation("Definitions");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.ProgramEntity", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.TrainingPlanEntity", b =>
                {
                    b.Navigation("PlanSessions");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutEntity", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Sets");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutSetGroupEntity", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateEntity", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Sets");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Unshackled.Fitness.Core.Data.Entities.WorkoutTemplateSetGroupEntity", b =>
                {
                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
